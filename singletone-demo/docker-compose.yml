services:
  # PostgreSQL - Para datos relacionales (Usuarios, Planes)
  postgres:
    image: postgres:15-alpine
    container_name: singletone_postgres
    environment:
      POSTGRES_DB: singletone_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - singletone_network
    restart: unless-stopped

  # MongoDB - Para datos musicales (Artistas, Álbumes, Canciones)
  mongodb:
    image: mongo:6.0
    container_name: singletone_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: singletone_music
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - singletone_network
    restart: unless-stopped

  # Redis - Para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: singletone_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - singletone_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # pgAdmin - Interfaz web para PostgreSQL (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: singletone_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@singletone.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - singletone_network
    restart: unless-stopped

  # Mongo Express - Interfaz web para MongoDB (opcional)
  mongo-express:
    image: mongo-express:latest
    container_name: singletone_mongo_express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - singletone_network
    restart: unless-stopped

  # =====================================
  # MICROSERVICIOS
  # =====================================

  # Microservicio - user-service  
  user-service:
    build:
      context: .
      dockerfile: ./docker/microservices/user-service.Dockerfile
    container_name: singletone_user_service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=singletone_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/singletone_music
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - singletone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  # Microservicio - profile-service
  profile-service:
    build:
      context: .
      dockerfile: ./docker/microservices/profile-service.Dockerfile
    container_name: singletone_profile_service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=singletone_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/singletone_music
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - singletone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  # Microservicio - music-service
  music-service:
    build:
      context: .
      dockerfile: ./docker/microservices/music-service.Dockerfile
    container_name: singletone_music_service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=singletone_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/singletone_music
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - singletone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  # Microservicio - library-service
  library-service:
    build:
      context: .
      dockerfile: ./docker/microservices/library-service.Dockerfile
    container_name: singletone_library_service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=singletone_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/singletone_music
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - singletone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3
  
  # Microservicio - recommendation-service
  recommendation-service:
    build:
      context: .
      dockerfile: ./docker/microservices/recommendation-service.Dockerfile
    container_name: singletone_recommendation_service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=singletone_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/singletone_music
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - singletone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  # Microservicio - plans-service
  plans-service:
    build:
      context: .
      dockerfile: ./docker/microservices/plans-service.Dockerfile
    container_name: singletone_plans_service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=singletone_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/singletone_music
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - singletone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  singletone_network:
    driver: bridge